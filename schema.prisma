datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Prisma & PS Bug: refrential integrity when updating scalar fields with refrences https://github.com/prisma/prisma/issues/10758
// workaround for now is using onUpdate: noAction. This means prisma cannot update fields with references. Ok for now because they are primary keys.

// https://briananglin.me/posts/spenreadding-5k-to-learn-how-database-indexes-work/#no-foreign-keys
// planet scale does not enforce fk contraints. this means that mysql does not automaticly index fks.
// workaround is to explicitly index fks using @@index([fooId, barId])

model User {
  email  String @id @db.VarChar(256)
  userId String @unique @default(cuid()) @db.VarChar(64)

  name            String   @db.VarChar(128)
  createdAt       DateTime @default(now()) @db.DateTime(0)
  updatedAt       DateTime @updatedAt @db.DateTime(0)
  profileSrc      String?  @db.VarChar(128)
  profilePicS3Key String?  @db.VarChar(128)
  about           String?  @db.VarChar(256)
  profileViews    Int      @default(0) @db.UnsignedInt
  postViews       Int      @default(0) @db.UnsignedInt
  numFollowers    Int      @default(0) @db.UnsignedInt

  posts           Post[]      @relation("posted")
  comments        Comment[]   @relation("commented")
  likedComments   Comment[]   @relation("likedComments")
  likedPosts      Post[]      @relation("likedPosts")
  savedComments   Comment[]   @relation("savedComments")
  savedPosts      Post[]      @relation("savedPosts")
  topics          Topic[]     @relation("topics")
  usersFollowing  User[]      @relation("followingUsers")
  usersFollowedBy User[]      @relation("followingUsers")
  moderatesTopics Topic[]     @relation("moderatedTopics")
  pics            Pic[]
  rateLimits      RateLimit[]

  @@unique([email, userId])
  @@index([name])
  @@index([userId])
}

model Post {
  postId String @id @default(cuid()) @db.VarChar(32)

  email     String @db.VarChar(256)
  topicId   String @db.VarChar(32)
  topicName String @db.VarChar(32)
  userId    String @db.VarChar(32)

  createdAt     DateTime @default(now()) @db.DateTime(0)
  updatedAt     DateTime @updatedAt @db.DateTime(0)
  numLikes      Int      @default(0) @db.Int
  html          String   @db.Text
  views         Int      @default(0) @db.UnsignedInt
  storePartsQty Json? // {[storePartId: string]: number}

  user        User        @relation("posted", fields: [email, userId], references: [email, userId], onUpdate: NoAction)
  topic       Topic       @relation(fields: [topicId, topicName], references: [topicId, name], onUpdate: NoAction)
  postLikedBy User[]      @relation("likedPosts")
  postSavedBy User[]      @relation("savedPosts")
  pics        Pic[]
  comments    Comment[]
  storeParts  StorePart[]

  @@index([email])
  @@index([userId])
  @@index([topicId])
  @@index([topicName])
}

model Comment {
  commentId String @id @default(cuid()) @db.VarChar(32)

  email           String @db.VarChar(256)
  postId          String @db.VarChar(32)
  parentCommentId String @db.VarChar(32)

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)
  numLikes  Int      @default(0) @db.Int
  text      String   @db.Text

  user           User   @relation("commented", fields: [email], references: [email], onUpdate: NoAction)
  post           Post   @relation(fields: [postId], references: [postId], onUpdate: NoAction)
  commentLikedBy User[] @relation("likedComments")
  commentSavedBy User[] @relation("savedComments")

  @@index([email])
  @@index([postId])
  @@index([parentCommentId])
  @@index([numLikes(sort: Desc)])
  @@index([createdAt(sort: Desc)])
}

model Pic {
  picId String @id @default(cuid()) @db.VarChar(32)

  email   String  @db.VarChar(256)
  postId  String? @db.VarChar(32)
  partId  String? @unique @db.VarChar(32)
  topicId String? @unique @db.VarChar(32)

  s3Key     String   @db.VarChar(128)
  createdAt DateTime @default(now()) @db.DateTime(0)

  post  Post?  @relation(fields: [postId], references: [postId], onUpdate: NoAction)
  user  User   @relation(fields: [email], references: [email], onUpdate: NoAction)
  topic Topic? @relation(fields: [topicId], references: [topicId], onUpdate: NoAction)

  @@index([email])
  @@index([postId])
  @@index([partId])
  @@index([topicId])
}

model PicJob {
  s3Key String @id @db.VarChar(128)

  createdAt DateTime @default(now()) @db.DateTime(0)

  @@index([createdAt])
}

model RateLimit {
  rateLimitId String @id @default(cuid()) @db.VarChar(32)

  email     String   @db.VarChar(256)
  createdAt DateTime @default(now()) @db.DateTime(0)

  user     User @relation(fields: [email], references: [email], onUpdate: NoAction)
  resource Int  @db.UnsignedTinyInt

  @@index([email, resource])
  @@index([createdAt])
}

model Topic {
  topicId String @id @default(cuid()) @db.VarChar(32)

  name          String   @unique @db.VarChar(32)
  about         String   @db.Text
  createdAt     DateTime @default(now()) @db.DateTime(0)
  updatedAt     DateTime @updatedAt @db.DateTime(0)
  followerCount Int      @default(0) @db.UnsignedInt
  views         Int      @default(0) @db.UnsignedInt

  moderators     User[]         @relation("moderatedTopics")
  users          User[]         @relation("topics")
  partCategories PartCategory[]
  parts          Part[]
  pic            Pic?
  Post           Post[]

  @@unique([topicId, name])
  @@index([name])
}

model PartCategory {
  partCategoryId String @id @default(cuid()) @db.VarChar(32)

  topicId   String @db.VarChar(32)
  topicName String @db.VarChar(32)

  name  String @db.VarChar(32)
  about String @db.VarChar(256)

  topic Topic  @relation(fields: [topicId, topicName], references: [topicId, name], onUpdate: NoAction)
  parts Part[] @relation("parts")

  // names should be unique within each topic,
  // but not gloabally unique because two Topic's PartCategory may mean diffrent things in the context of the topic
  // the PartCategory wheel should mean two diffrent things when used in Topic Bike vs Car
  @@unique([name, topicId])
  @@index([topicId])
  @@index([topicName])
}

model Part {
  partId String @id @default(cuid()) @db.VarChar(32)

  topicId        String @db.VarChar(32)
  partCategoryId String @db.VarChar(32)
  numPosts       Int    @default(0) @db.UnsignedInt

  name        String  @db.VarChar(256)
  description String? @db.Text
  src         String? @db.Text

  topic        Topic        @relation(fields: [topicId], references: [topicId], onUpdate: NoAction)
  partCategory PartCategory @relation("parts", fields: [partCategoryId], references: [partCategoryId], onUpdate: NoAction)
  storeParts   StorePart[]

  // no two parts will have the same name and partCategroyId
  @@unique([name, partCategoryId])
  @@index([topicId])
  @@index([partCategoryId])
  @@index([partCategoryId, name(sort: Asc), numPosts(sort: Desc)])
}

model Store {
  storeId String @id @default(cuid()) @db.VarChar(32)

  name String @unique @db.VarChar(32)

  storeParts StorePart[]

  @@index([name])
}

model StorePart {
  storePartId String @id @default(cuid()) @db.VarChar(32)

  partId  String @db.VarChar(32)
  storeId String @db.VarChar(32)

  price     String   @db.VarChar(32)
  url       String   @db.VarChar(512)
  updatedAt DateTime @updatedAt

  store Store  @relation(fields: [storeId], references: [storeId], onUpdate: NoAction)
  part  Part   @relation(fields: [partId], references: [partId], onUpdate: NoAction)
  posts Post[]

  @@index([partId])
  @@index([storeId])
  @@index([url])
}
